@model Core.PollDto

@{
    ViewData["Title"] = "PollView";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int countOptions = 0;
    int countLabels = 0;
}
<link rel="stylesheet" href="~/css/RadioButtons.css"/>

<div class="d-flex justify-content-center">
    <div style="width: 60vw">
        <div class="row text-center mb-5 mt-5 w-100 d-flex justify-content-center">
            <h1 class="display-4 text-truncate">@Html.DisplayFor(model => model.Title)</h1>
        </div>

        <div class="row ">
            <div class="shadow border-radius col-8 m-2 p-4">
                <h5 class="">Описание:</h5>
                <hr />
                <span class="">@Html.DisplayFor(model => model.Description)</span>
            </div>
            <div class="col-3 shadow border-radius p-0 m-2">
                <div class="btn-group btn-group-lg d-flex justify-content-center" role="group">

                    <a class="btn bg-info rightRoundingNone leftRoundingNone">
                        <i class="material-icons text-white" style="font-size:40px">edit</i>
                    </a>

                    <a class="btn bg-danger rightRoundingNone leftRoundingNone"  asp-controller="Poll" asp-action="Delete" asp-route-id="@Model.Id">
                        <i class="material-icons text-white" style="font-size:40px">delete</i>
                    </a>
                </div>
                <div class="p-3">
                    <div class="text-center">
                        <span>
                            <i class="material-icons">place</i>
                            <br /> @Html.DisplayFor(modelItem => Model.CreationDate)
                        </span>
                    </div>
                    <hr />
                    <div class="text-center">
                        <span>
                            <i class="material-icons">date_range</i>
                            <br /> @Html.DisplayFor(modelItem => Model.StartDate)
                        </span>
                    </div>
                    <hr />
                    <div class="text-center">
                        <span>
                            <i class="material-icons">face</i>
                            <br />ID: @Html.DisplayFor(modelItem => Model.Id)
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <form class="row">

            <div class="form-row d-flex align-content-center col-8 shadow border-radius m-2">
                <div class="radios-boxes m-3">
                    <div class="radios">
                        @foreach (var option in Model.Options)
                        {
                            countOptions++;
                            <input type="radio" name="radio" id="@String.Format("radio" + countOptions)" class="radio" value="@option">
                        }
                        <div class="ball"></div>
                    </div>
                    <div class="labels">
                        @foreach (var option in Model.Options)
                        {
                            countLabels++;
                            <label for="@String.Format("radio" + countLabels)" class="label">@option.Text</label>
                        }
                    </div>
                </div>
            </div>
        </form>

        <div class="form-row">
            @*@Html.ActionLink("Edit", "Edit", new { id = Model.Id })*@
        </div>
    </div>
</div>


<svg class="filter" version="1.1">
    <defs>
        <filter id="gooeyness">
            <feGaussianBlur in="SourceGraphic" stdDeviation="8" result="blur" />
            <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 20 -10" result="gooey" />
            <feComposite in="SourceGraphic" in2="gooey" operator="atop" />
        </filter>
    </defs>
</svg>


<script>
    let radios = document.querySelectorAll('.radio');
    let labels = document.querySelectorAll('.label');
    let ball = document.querySelector('.ball');
    let prevRadio, prevLabel;
    radios.forEach((radio, index) => {
        radio.addEventListener('click', function (e) {
            if (prevRadio) prevRadio.classList.toggle('active');
            if (prevLabel) prevLabel.classList.toggle('active');
            radio.classList.toggle('active');
            prevRadio = radio;
            labels[index].classList.toggle('active');
            prevLabel = labels[index];
            ball.className = `ball pos${index}`;
        });
    });
</script>